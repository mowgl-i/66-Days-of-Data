str_detect(titlev3, regex("forsen",ignore_case = T)) ~ "forsen",
str_detect(titlev3, regex("esfand|esfandtv",ignore_case = T)) ~ "EsfandTv",
str_detect(titlev3, regex("ludwig",ignore_case = T)) ~ "Ludwig",
str_detect(titlev3, regex("mizkif",ignore_case = T)) ~ "Mizkif")) %>%
group_by(streamer, ) %>% mutate(month =  as.factor(format(date, "%m")),
year = as.factor(year(date))) %>%
group_by(year,month,streamer) %>% summarize("total score" = sum(score)) %>%  ungroup() %>%
filter(year %notin% c("2016","2017")) %>%
ggplot(aes(x=month, y = `total score`, group = streamer,color = streamer))+geom_line(size = 2,alpha = 0.7)+
facet_wrap(vars(year),nrow = 1, ncol = 4,strip.position = "bottom") + theme_wsj(base_size = 9,base_family = "Segoe Print",color = "green")+ theme(legend.title = element_blank(),legend.position = "bottom")+
labs(title = "Reddit karma over time", subtitle = "for posts containing 'relevant' streamers")
rm(lsf_data,post_tokens)
data <- read_csv("C:/Users/macia/Documents/MSIA-19/Git/Reddit-and-Twitch/Data Collection/chats.csv",col_types = cols(X1 = col_skip()))
head(data, n = 10)
glimpse(data)
# gotta change these tokens :(, maybe have a git auth? This data is being read from github, and uses git lfs.
emote_data_bttv <- read_csv("C:/Users/macia/Documents/MSIA-19/Git/Reddit-and-Twitch/Data Collection/bttv_emotes.csv")
emote_data_ffz <- read_csv("C:/Users/macia/Documents/MSIA-19/Git/Reddit-and-Twitch/Data Collection/ffz_emotes.csv")
emote_data <- emote_data_ffz %>% full_join(emote_data_bttv, by = "emote_name") %>% select(-c(X1.x,X1.y)) %>% distinct(emote_name,.keep_all = T)%>%
mutate(emote_name = str_to_lower(emote_name))
rm(emote_data_bttv,emote_data_ffz)
# https://i.stack.imgur.com/kLMaS.jpg
test<-emote_data %>% mutate("emote_image" = paste("<img src=", emote_link, sep = "")) %>%
mutate(emote_image = paste0(emote_image,' height="52"></img>',sep = "")) %>%  select(emote_name,emote_image)
datatable(test, escape = FALSE)
data %>% group_by(streamer) %>%  count(sort = T)%>%
head(n=10) %>%
ggplot(aes(x = reorder(streamer,-n), y = n))+
geom_col()+
theme_wsj(base_size = 12, color = "green")+
theme(axis.text.x = element_text(size = 12, angle = 15,vjust = .55))+
labs(title = "Which streamer has the most chats?")
datatable(test, escape = FALSE,caption = "Emote names and Photos")
glimpse(emote_data)
emote_data
emote_data %>% mutate("emote_image" = case_when(
emote_link != NA_character_ ~ emote_link,
TRUE ~ emote_image))
glimpse(emote_data)
emote_data %>% mutate("emote_image_link" = case_when(
emote_link != NA_character_ ~ emote_link,
TRUE ~ emote_image))
emote_data %>% mutate("emote_image_link" = case_when(
emote_link != NA_character_ ~ emote_link,
emote_link == NA_character_ ~ emote_image))
emote_data %>% mutate("emote_image_link" = case_when(
emote_link == NA_character_ ~ as.character(emote_image),
emote_link != NA_character_ ~ as.character(emote_link))
paste("<img src=", emote_link, sep = "")) %>%
emote_data %>% mutate("emote_image_link" = case_when(
emote_link == NA_character_ ~ as.character(emote_image),
emote_link != NA_character_ ~ as.character(emote_link)))
emote_data %>% mutate("emote_image_link" = case_when(
emote_link == NA ~ as.character(emote_image),
emote_link != NA ~ as.character(emote_link)))
emote_data %>% mutate("emote_image_link" = emote_link)
emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
emote_image_link == NA ~ as.character(emote_image),
TRUE ~ as.character(emote_image_link)))
emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
emote_image_link == NA_character_ ~ as.character(emote_image),
TRUE ~ as.character(emote_image_link)))
emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
emote_image_link == NA_character_ ~ emote_image),
TRUE ~ emote_image_link))
emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
emote_image_link == NA_character_ ~ emote_image,
TRUE ~ emote_image_link))
emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
is.na(emote_image_link) ~ emote_image,
TRUE ~ emote_image_link))
is.na(emote_image_link) ~ emote_image,
emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
is.na(emote_image_link) ~ emote_image,
TRUE ~ emote_image_link)) %>% mutate(emote_image_link = paste("<img src=", emote_link, sep = "")) %>%
mutate(emote_image = paste0(emote_image,' height="52"></img>',sep = "")) %>%  select(emote_name,emote_image)
emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
is.na(emote_image_link) ~ emote_image,
TRUE ~ emote_image_link)) %>% mutate(emote_image_link = paste("<img src=", emote_image_link, sep = "")) %>%
mutate(emote_image_link = paste0(emote_image_link,' height="52"></img>',sep = "")) %>%  select(emote_name,emote_image_link)
datatable(test, escape = FALSE,caption = "Emote names and Photos")
test<-emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
is.na(emote_image_link) ~ emote_image,
TRUE ~ emote_image_link)) %>% mutate(emote_image_link = paste("<img src=", emote_image_link, sep = "")) %>%
mutate(emote_image_link = paste0(emote_image_link,' height="52"></img>',sep = "")) %>%  select(emote_name,emote_image_link)
datatable(test, escape = FALSE,caption = "Emote names and Photos")
test<-emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
is.na(emote_image_link) ~ emote_image,
TRUE ~ emote_image_link)) %>% mutate(emote_image_link = paste("<img src=", emote_image_link, sep = "")) %>%
mutate(emote_image_link = paste0(emote_image_link,' height="52"></img>',sep = "")) %>%  select(emote_name,emote_image_link)
datatable(test, escape = FALSE,caption = "Emote names and Photos")
data %>% group_by(streamer) %>%  count(sort = T)%>%
head(n=10) %>%
ggplot(aes(x = reorder(streamer,-n), y = n))+
geom_col()+
theme_wsj(base_size = 12, color = "green")+
theme(axis.text.x = element_text(size = 12, angle = 15,vjust = .55))+
labs(title = "Which streamer has the most chats?")
data %>% group_by(user) %>% filter(user %notin% c("StreamElements","Streamlabs","Nightbot")) %>%  count(sort = T) %>%
head(n=10)%>%
ggplot(aes(x = reorder(user,-n), y = n))+
geom_col()+
theme_wsj(base_size = 12, color = "green")+
theme(axis.text.x = element_text(size = 8, angle = 15,vjust = .55),
plot.title = element_text(size = 20))+
labs(title = "Which user has the most chats?")
# Streamelements and streamlabs are bots.
top_5_streamers <- data %>% group_by(streamer) %>% count(sort = T) %>% head(n=5) %>% distinct(streamer)
data %>% filter(streamer %in% top_5_streamers$streamer) %>% mutate(date_year = year(as.Date.character(date))) %>% group_by(date_year,streamer) %>% count(sort = T)%>%
ggplot(aes(x = date_year, y = n, color = streamer)) +
geom_line(size = 2)+
theme_wsj(base_size = 12, color = "green")+
labs(title = "Streamer Communities: Account Creation Dates", subtitle = "Top 5 Streamers")+
theme(plot.title = element_text(size = 15),plot.subtitle = element_text(size= 8),legend.title = element_blank(),legend.position = "bottom")
data %>%
add_count(user,streamer) %>%
filter(n>1,user %notin% c("StreamElements","Streamlabs","Nightbot","Fossabot")) %>%
group_by(user) %>%
add_count(n_distinct(streamer)) %>%
ungroup() %>%
top_n(`n_distinct(streamer)`, n = 2) %>%
arrange(desc(n)) %>%
filter(n >=20) %>%
add_count(user,streamer,name = "#_chat_per_clip") %>%
ggplot(aes(x = user, y = `#_chat_per_clip`, fill = streamer))+
geom_bar(position = "stack",stat = "identity") +
theme_wsj(base_size = 12, color = "green")+
theme(legend.title = element_blank(),legend.position = "bottom")+
labs(title = "multi-stream chatters")
tokens <- data %>%
unnest_tokens(word,body)%>%
filter(str_detect(word,"^[:alpha:]"))
tokens %>% glimpse(width = 50)
tokens %>% group_by(word) %>% count(sort = T)%>%
head(n=10) %>%
ggplot(aes(x= reorder(word,-n),y=n))+
geom_col()+
theme_wsj(base_size = 12, color = "green")+
theme(axis.text.x = element_text(angle = 25))+
labs(title ="Token Counts")
data %>%
unnest_tokens(bigram,body,token = 'ngrams',n = 2)%>%
filter(str_detect(bigram,"^[:alpha:]")) %>%
group_by(bigram) %>% count(sort = T)%>%
head(n=10) %>%
ggplot(aes(x= reorder(bigram,-n),y=n))+
geom_col()+
theme_wsj(base_size = 12, color = "green")+
theme(axis.text.x = element_text(angle = 25,size = 9))+
labs(title ="Bigram Counts")
data %>%
unnest_tokens(trigram,body,token = 'ngrams',n = 3)%>%
filter(str_detect(trigram,"^[:alpha:]")) %>%
group_by(trigram) %>% count(sort = T)%>%
head(n=10) %>%
ggplot(aes(x= reorder(trigram,-n),y=n))+
geom_col()+
theme_wsj(base_size = 12, color = "green")+
theme(axis.text.x = element_text(angle = 25,size = 9))+
labs(title ="trigram Counts")
corpus_data <- readtext("C:/Users/macia/Documents/MSIA-19/Git/Reddit-and-Twitch/Data Collection/corpus_data.csv", text_field = 'text')
glimpse(corpus_data)
corpus <- corpus(corpus_data)
dfm <- dfm(corpus, remove_punct=T)
# Select emotes
emotes = emote_data$emote_name
tags = dfm_select(dfm,pattern = emotes)
#tags
toptag = names(topfeatures(tags,30))
# These are the top emotes mentioned in the dataset from the list of popular bttv/ffz emotes
head(toptag)
tag_fcm <- fcm(tags)
toptags_fcm <- fcm_select(tag_fcm, pattern = toptag)
textplot_network(toptags_fcm,min_freeq = 0.1, edge_alpha = 0.7, edge_size = 5)
textplot_network(toptags_fcm,min_freeq = 0.1, edge_alpha = 0.7, edge_size = 5,
vertex_labelsize = rowSums(toptags_fcm)/min(rowSums(toptags_fcm)))
tag_fcm <- fcm(tags)
toptags_fcm <- fcm_select(tag_fcm, pattern = toptag)
textplot_network(toptags_fcm,min_freeq = 0.1, edge_alpha = 0.7, edge_size = 5,
vertex_labelsize = rowSums(toptags_fcm)/min(rowSums(toptags_fcm)))
textplot_network(toptags_fcm,min_freeq = 0.1, edge_alpha = 0.7, edge_size = 5,
vertex_labelsize = 0.5 * rowSums(toptags_fcm)/min(rowSums(toptags_fcm)))
textplot_network(toptags_fcm,min_freeq = 0.1, edge_alpha = 0.7, edge_size = 5,
vertex_labelsize = 0.25 * rowSums(toptags_fcm)/min(rowSums(toptags_fcm)))
textplot_network(toptags_fcm,min_freeq = 0.1, edge_alpha = 0.5, edge_size = 5)
tags = dfm_select(dfm, pattern = c("£","â","<","ó","ðÿ"),selection = "remove")
tags = dfm_select(dfm, pattern = c("£","â","<","ó","ðÿ"),selection = "remove")
#tags
toptag = names(topfeatures(tags,20))
tag_fcm <- fcm(tags)
toptags_fcm <- fcm_select(tag_fcm, pattern = toptag)
textplot_network(toptags_fcm,min_freeq = 0.1, edge_alpha = 0.5, edge_size = 5)
count_bigrams <- function(data) {
data %>%
unnest_tokens(bigram,"body", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
}
visualize_bigrams <- function(bigrams) {
set.seed(2020)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
bigrams %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE, arrow = a) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
}
viz.bigrams <- data %>%
count_bigrams()
# filter out rare combinations, as well as digits and produce graph
viz.bigrams %>%
filter(n >70) %>%
visualize_bigrams()
word_cors <- tokens %>%
group_by(word) %>%
filter(n() >= 10 ) %>%
pairwise_cor(word, streamer, sort = T)#, sort = TRUE)
top_10 <-word_cors %>% mutate("streamer" = case_when(
item2 == "trainwreckstv" ~ "trainwreckstv", # ahh,
item2 == "esfandtv" ~ "esfandtv",
item2 == "forsen" ~ "forsen",
item2 == "mizkif" ~ "mizkif",
item2 == "ludwig" ~ "ludwig",
item2 == "moonmoon" ~ "moonmoon",
item2 == "xqcow" ~ "xqcow",
item2 == "sykkuno" ~ "sykkuno",
item2 == "vadikus007" ~ "vadikus007",
item2 == "loltyler1" ~ "loltyler1",
TRUE ~ "WHO?"
)) # there are 83 unique streamers in the dataset, we should filter this some how. Either top 20, or maybe with chats > 100.
# Build a scraper that grabes the names of emotes for eache of the streamers?
#top_10 %>% group_by(streamer) %>% count() # strange numbers here, each streamer has same number?, because I filteer for top 10 above?
# from 2 mil rows
# to about 2k rows
test<-top_10 %>%
mutate(contains_emote = case_when(item1 %in% emote_data$emote_name ~ 1, TRUE ~ 0)) %>%
filter(contains_emote == 1) %>% # filtering for only emotes!
filter(streamer != "WHO?")%>%
group_by(streamer) %>% top_n(10,wt = correlation)
streamers = c("trainwreckstv","esfandtv","forsen","mizkif","ludwig","moonmoon","xqcow","sykkuno","vadikus007","loltyler1")
emote_data_1 <- emote_data %>% select(emote_name,emote_link) %>% na.omit()
# TEST 2
test_2 <- test %>% left_join(emote_data_1, by = c("item1" = "emote_name"))
#-------
test <- test %>% graph_from_data_frame()
test_viz <- toVisNetworkData(test)
test_viz$nodes <- test_viz$nodes %>% mutate("group" = case_when(label %in% streamers ~ "Streamer",TRUE ~ "Emote"))
#test_viz checking the dataframe
visNetwork(nodes = test_viz$nodes, edges = test_viz$edges, main = "Emote correlation to Streamer")%>%
visGroups(groupname = "Streamer", color = "green", shape = "square") %>%
visGroups(groupname = "Emote", color = "blue")%>%
visOptions(highlightNearest = list(enabled = T, hover = T))%>%
visLegend()
#--------------------
test_2
is.na(emote_image_link) ~ emote_image,
emote_data_1 <- emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
is.na(emote_image_link) ~ emote_image,
TRUE ~ emote_image_link)) %>%  select(emote_name,emote_image_link)
# TEST 2
test_2 <- test %>% left_join(emote_data_1, by = c("item1" = "emote_name"))
# Build a scraper that grabes the names of emotes for eache of the streamers?
#top_10 %>% group_by(streamer) %>% count() # strange numbers here, each streamer has same number?, because I filteer for top 10 above?
# from 2 mil rows
# to about 2k rows
test<-top_10 %>%
mutate(contains_emote = case_when(item1 %in% emote_data$emote_name ~ 1, TRUE ~ 0)) %>%
filter(contains_emote == 1) %>% # filtering for only emotes!
filter(streamer != "WHO?")%>%
group_by(streamer) %>% top_n(10,wt = correlation)
emote_data_1 <- emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
is.na(emote_image_link) ~ emote_image,
TRUE ~ emote_image_link)) %>%  select(emote_name,emote_image_link)
# TEST 2
test_2 <- test %>% left_join(emote_data_1, by = c("item1" = "emote_name"))
test_2
test_2 <- test_2 %>% graph_from_data_frame()
test_viz_2 <- toVisNetworkData(test_2)
test_viz_2$nodes
test_viz_2$nodes <- test_viz_2$nodes %>% mutate("group" = case_when(label %in% streamers ~ "Streamer",TRUE ~ "Emote"),
"shape" = "image")
test_viz_2$nodes
test_viz_2$edges
test_viz_2$nodes
test_viz_2$nodes<-test_viz_2$nodes %>% left_join(test_viz_2$edges, by = c('id' = 'from')) %>% select(id,label,group,shape,emote_image_link) %>% rename(image = emote_image_link) %>% distinct(id, .keep_all = T)
test_viz_2$nodes
test_viz_2$nodes<-test_viz_2$nodes %>% mutate(image = case_when(id == "xqcow" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/xqcow-profile_image-9298dca608632101-70x70.jpeg",
id == "loltyler1" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/f3591dbe4ee3d94b-profile_image-70x70.png",
id == "moonmoon" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/3973e918fe7cc8c8-profile_image-70x70.png",
id == "trainwreckstv" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/1f47965f-7961-4b64-ad6f-71808d7d7fe9-profile_image-70x70.png",
id == "forsen" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/forsen-profile_image-48b43e1e4f54b5c8-300x300.png",
id == "esfandtv" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/476ee93d-66a6-4e57-b3a9-db1ceb168ad8-profile_image-70x70.png",
id == "mizkif" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/ddd88d33-6c4f-424f-9246-5f4978c93148-profile_image-70x70.png",
id == "ludwig" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/bde8aaf5-35d4-4503-9797-842401da900f-profile_image-70x70.png",
id == "sykkuno" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/sykkuno-profile_image-6ab1e70e07e29e9b-70x70.jpeg",
TRUE ~ as.character(image))) %>%  na.omit()
test_viz_2$nodes
#test_viz_2 checking the dataframe
visNetwork(nodes = test_viz_2$nodes, edges = test_viz_2$edges, main = "Emote correlation to Streamer")%>%
visGroups(groupname = "Streamer", color = "green", shape = "square") %>%
visGroups(groupname = "Emote", color = "blue")%>%
visOptions(highlightNearest = list(enabled = T, hover = T))%>%
visLegend()
#test_viz_2 checking the dataframe
visNetwork(nodes = test_viz_2$nodes, edges = test_viz_2$edges, main = "Emote correlation to Streamer")%>%
visGroups(groupname = "Streamer", color = "green", shape = "square", size = 50) %>%
visGroups(groupname = "Emote", color = "blue")%>%
visOptions(highlightNearest = list(enabled = T, hover = T))%>%
visLegend()
data <- read_csv("C:/Users/macia/Documents/MSIA-19/Git/Reddit-and-Twitch/Data Collection/chats.csv",col_types = cols(X1 = col_skip()))
head(data, n = 10)
glimpse(data)
# gotta change these tokens :(, maybe have a git auth? This data is being read from github, and uses git lfs.
emote_data_bttv <- read_csv("C:/Users/macia/Documents/MSIA-19/Git/Reddit-and-Twitch/Data Collection/bttv_emotes.csv")
emote_data_ffz <- read_csv("C:/Users/macia/Documents/MSIA-19/Git/Reddit-and-Twitch/Data Collection/ffz_emotes.csv")
emote_data <- emote_data_ffz %>% full_join(emote_data_bttv, by = "emote_name") %>% select(-c(X1.x,X1.y)) %>% distinct(emote_name,.keep_all = T)%>%
mutate(emote_name = str_to_lower(emote_name))
rm(emote_data_bttv,emote_data_ffz)
test<-emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
is.na(emote_image_link) ~ emote_image,
TRUE ~ emote_image_link)) %>% mutate(emote_image_link = paste("<img src=", emote_image_link, sep = "")) %>%
mutate(emote_image_link = paste0(emote_image_link,' height="52"></img>',sep = "")) %>%  select(emote_name,emote_image_link)
datatable(test, escape = FALSE,caption = "Emote names and Photos")
tokens <- data %>%
unnest_tokens(word,body)%>%
filter(str_detect(word,"^[:alpha:]"))
tokens %>% glimpse(width = 50)
corpus_data <- readtext("C:/Users/macia/Documents/MSIA-19/Git/Reddit-and-Twitch/Data Collection/corpus_data.csv", text_field = 'text')
glimpse(corpus_data)
corpus <- corpus(corpus_data)
dfm <- dfm(corpus, remove_punct=T)
# Select emotes
emotes = emote_data$emote_name
tags = dfm_select(dfm,pattern = emotes)
#tags
toptag = names(topfeatures(tags,30))
# These are the top emotes mentioned in the dataset from the list of popular bttv/ffz emotes
head(toptag)
tag_fcm <- fcm(tags)
toptags_fcm <- fcm_select(tag_fcm, pattern = toptag)
textplot_network(toptags_fcm,min_freeq = 0.1, edge_alpha = 0.5, edge_size = 5)
tags = dfm_select(dfm, pattern = c("£","â","<","ó","ðÿ"),selection = "remove")
#tags
toptag = names(topfeatures(tags,20))
tag_fcm <- fcm(tags)
toptags_fcm <- fcm_select(tag_fcm, pattern = toptag)
textplot_network(toptags_fcm,min_freeq = 0.1, edge_alpha = 0.5, edge_size = 5)
count_bigrams <- function(data) {
data %>%
unnest_tokens(bigram,"body", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
}
visualize_bigrams <- function(bigrams) {
set.seed(2020)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
bigrams %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE, arrow = a) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
}
viz.bigrams <- data %>%
count_bigrams()
# filter out rare combinations, as well as digits and produce graph
viz.bigrams %>%
filter(n >70) %>%
visualize_bigrams()
word_cors <- tokens %>%
group_by(word) %>%
filter(n() >= 10 ) %>%
pairwise_cor(word, streamer, sort = T)#, sort = TRUE)
top_10 <-word_cors %>% mutate("streamer" = case_when(
item2 == "trainwreckstv" ~ "trainwreckstv", # ahh,
item2 == "esfandtv" ~ "esfandtv",
item2 == "forsen" ~ "forsen",
item2 == "mizkif" ~ "mizkif",
item2 == "ludwig" ~ "ludwig",
item2 == "moonmoon" ~ "moonmoon",
item2 == "xqcow" ~ "xqcow",
item2 == "sykkuno" ~ "sykkuno",
item2 == "vadikus007" ~ "vadikus007",
item2 == "loltyler1" ~ "loltyler1",
TRUE ~ "WHO?"
)) # there are 83 unique streamers in the dataset, we should filter this some how. Either top 20, or maybe with chats > 100.
# Build a scraper that grabes the names of emotes for eache of the streamers?
#top_10 %>% group_by(streamer) %>% count() # strange numbers here, each streamer has same number?, because I filteer for top 10 above?
# from 2 mil rows
# to about 2k rows
test<-top_10 %>%
mutate(contains_emote = case_when(item1 %in% emote_data$emote_name ~ 1, TRUE ~ 0)) %>%
filter(contains_emote == 1) %>% # filtering for only emotes!
filter(streamer != "WHO?")%>%
group_by(streamer) %>% top_n(10,wt = correlation)
streamers = c("trainwreckstv","esfandtv","forsen","mizkif","ludwig","moonmoon","xqcow","sykkuno","vadikus007","loltyler1")
emote_data_1 <- emote_data %>% mutate("emote_image_link" = emote_link) %>%
mutate(emote_image_link = case_when(
is.na(emote_image_link) ~ emote_image,
TRUE ~ emote_image_link)) %>%  select(emote_name,emote_image_link)
# TEST 2
test_2 <- test %>% left_join(emote_data_1, by = c("item1" = "emote_name"))
#-------
test_2 <- test_2 %>% graph_from_data_frame()
test_viz_2 <- toVisNetworkData(test_2)
test_viz_2$nodes <- test_viz_2$nodes %>% mutate("group" = case_when(label %in% streamers ~ "Streamer",TRUE ~ "Emote"),
"shape" = "image")
test_viz_2$nodes<-test_viz_2$nodes %>% left_join(test_viz_2$edges, by = c('id' = 'from')) %>% select(id,label,group,shape,emote_image_link) %>% rename(image = emote_image_link) %>% distinct(id, .keep_all = T)
test_viz_2$nodes<-test_viz_2$nodes %>% mutate(image = case_when(id == "xqcow" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/xqcow-profile_image-9298dca608632101-70x70.jpeg",
id == "loltyler1" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/f3591dbe4ee3d94b-profile_image-70x70.png",
id == "moonmoon" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/3973e918fe7cc8c8-profile_image-70x70.png",
id == "trainwreckstv" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/1f47965f-7961-4b64-ad6f-71808d7d7fe9-profile_image-70x70.png",
id == "forsen" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/forsen-profile_image-48b43e1e4f54b5c8-300x300.png",
id == "esfandtv" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/476ee93d-66a6-4e57-b3a9-db1ceb168ad8-profile_image-70x70.png",
id == "mizkif" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/ddd88d33-6c4f-424f-9246-5f4978c93148-profile_image-70x70.png",
id == "ludwig" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/bde8aaf5-35d4-4503-9797-842401da900f-profile_image-70x70.png",
id == "sykkuno" ~ "https://static-cdn.jtvnw.net/jtv_user_pictures/sykkuno-profile_image-6ab1e70e07e29e9b-70x70.jpeg",
TRUE ~ as.character(image))) %>%  na.omit()
#test_viz_2 checking the dataframe
visNetwork(nodes = test_viz_2$nodes, edges = test_viz_2$edges, main = "Emote correlation to Streamer")%>%
visGroups(groupname = "Streamer", color = "green", shape = "square", size = 50) %>%
visGroups(groupname = "Emote", color = "blue")%>%
visOptions(highlightNearest = list(enabled = T, hover = T))%>%
visLegend()
#test_viz_2$nodes
lsf_data_comments = read_csv("C:/Users/macia/Documents/MSIA-19/Git/MSIA-21-/Network Analysis/lsf_data_comments.csv")
lsf_data_comments = read_csv("C:/Users/macia/Documents/MSIA-19/Git/MSIA-21-/Network Analysis/lsf_data_comments.csv")
lsf_data_comments$date<-as.POSIXct(lsf_data_comments$date,origin = "1970-01-01")
lsf_data_comments %>%  glimpse()
lsf_data_comments$body <- lsf_data_comments$body %>%
removeWords(stopwords("smart")) %>%
removePunctuation() %>%
removeNumbers() %>%
stripWhitespace() %>%
tolower()
lsf_data_comments <-lsf_data_comments %>%
mutate(id = row_number()) %>%
select(id,body)
set.seed(187187)
model <- BTM(lsf_data_comments, k = 10, window = 10, trace = T,iter = 20)
terms(model)
terms(model, top_n = 10)
devtools::install_github("nstrayer/datadrivencv")
datadrivencv::use_datadriven_cv(full_name = "Michael Puerto",
data_location = "https://docs.google.com/spreadsheets/d/1FfcP2nrzkc2Nakidt-tBX54SDfuxz7xpBRyBf-taTKY/edit?usp=sharing",
use_network_logo = TRUE)
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
getwd()
knitr::opts_chunk$set(echo = F)
library(pacman)
pacman::p_load(tidyverse, stringr, readr,lubridate)
getwd()
setwd("~/MSIA-19/Git/66 Days of Data/Sliced")
data <- read_csv('train.csv')
glimpse(data)
data %>% slice_max(Hours_watched)
data %>% slice_max(Hours_watched,Peak_viewers)
data %>% top_n(Hours_watched,20)
data %>% top_n(Hours_watched,20,wt = Avg_viewer_ratio) %>% group_by(Year)
data %>% top_n(x = Hours_watched,n = 20,wt = Avg_viewer_ratio) %>% group_by(Year)
data %>% top_n(x = Hours_watched,wt = Avg_viewer_ratio) %>% group_by(Year)
data %>% top_n(x = Hours_watched,wt = Avg_viewer_ratio) %>% group_by(Year)
data %>% top_n(Hours_watched,wt = Avg_viewer_ratio) %>% group_by(Year)
